#!/usr/bin/env node

//TODO: pass original line numbers from pre-processor to actual parser.
//TODO: preprocessor debug flag / output

var fs = require("fs");
var hbs = require("handlebars");
var preprocessor = require("./src/plantuml-preprocessor");
var parser = require("./src/plantuml");
var os = require("os");
var Define = require("./src/Define");
var EndIf = require("./src/EndIf");
var Else = require("./src/Else");
var IfDef = require("./src/IfDef");
var Include = require("./src/Include");
var Enumeration = require("./src/Enumeration");
var ConnectionEnd = require("./src/ConnectionEnd");




var path = require('path');


var options = {
  language: "coffeescript",
  output: null
};

options.properties = {};

var supported_languages = ["coffeescript", "csharp", "ecmascript5", "ecmascript6", "java", "php", "ruby", "typescript","jsonapi-schema","python-django"];

var args = process.argv.slice(2); // Trim "node" and the script path.

if (args.length === 0) {
  printUsage();
} else {
  convertFile(getArguments());
}

function printLanguages() {
  supported_languages.forEach(function (item) {
    console.log(item);
  });
  exitSuccess();
}

function printUsage() {
  console.log("Usage: plantcode [options] <inputFile>");
  console.log("");
  console.log("Generates classfile(s) for the provided PlantUML file specified by <input_file> and writes to standard output.");
  console.log("");
  console.log("Options:");
  console.log("  -l, --language <language>          name of the programming language");
  console.log("                                     which the produced class files");
  console.log("                                     will be written in");
  console.log("  -t, --temaplate <name>             name of template(.hbs), on the current path");
  console.log("                                     to use for generation. ");
  console.log("                                     optionally put an equally named file, ending in .js");
  console.log("                                     in the same place to supply the template with helper functions.");
  console.log('  -c, --cardinalities                expect relation cardinalities in the from "n", "*", "n..m" or "n..*"');
  console.log("                                     (with n/m non-negative integers). It will make 'isRequired' and");
  console.log("                                     'isMultiple' flags available on ConnectionEnds. (\"*\"===\"0..*\"");
  console.log("  -o, --out <output_path>            the path to output the file(s) to");
  console.log("      --show-languages               displays all the current supported");
  console.log("                                     programming languages for use");
  console.log("                                     for with the language option");
  console.log("  -h, --help                         print help and exit");
  console.log("  -d, --debug                        outputs the preproccessed, one file that is fed to the actual parser.");
  console.log("                                     contains the line numbers most error messages refer to.");
    exitSuccess();
}

function isValidLanguage(language) {
  return supported_languages.indexOf(language) !== -1;
}

function getArguments() {

  while (args.length > 0 && isOption(args[0])) {
    switch (args[0]) {
      case "-o":
      case "--out":
        nextArg();
        if (args.length === 0) {
          abort("Missing output directory or file for -o/--out option.");
        }
        options.output = args[0];
        break;
      case "-l":
      case "--language":
        nextArg();
        if (args.length === 0) {
          abort("Missing language of the -l/--language option.");
        } else if (!isValidLanguage(args[0])) {
          abort("Invalid language provided.");
        }
        options.language = args[0];
        break;
      case "-t":
      case "--template":
        nextArg();
        if (args.length === 0) {
            abort("Missing template file for the -t/--template option.");
        } else if (fs.existsSync(args[0])) {
            abort ("template file: " + args[0] + " not found.");
        }
        options.template = args[0];
        break;
      case "-p":
      case "-property":
        nextArg();
        if (args.length === 0) {
             abort("No property after -p/--property option.");
        }
        let parsed = /^(\w+)=(\S+)$/.exec(args[0]);
        if (parsed[0]) {
            options.properties[parsed[1]] = parsed[2];
        }
        else {
            abort("Invalid property: " +args[0]);
        }
        break;
      case "--show-languages":
        printLanguages();
        break;
      case "-h":
      case "--help":
        printUsage();
        break;
      case "-c":
      case "--cardinalities":
          options.cardinalities = true;
        break;
        default:
        abort("Invalid option " + args[0]);
        break;
        case "-d":
        case "--debug":
          options.debug = true;
    }
    nextArg();
  }

  switch (args.length) {
    case 1:
      options.input = args[0];
    break;
    default:
      abort("No input file provided.");
  }

  return options;

}

function readFile(filename) {

    try {

        return fs.readFileSync(filename, {encoding: "UTF-8"});

    }
    catch (e) {
        console.error("Unable to read input file: " + filename);
    }

}

function convertFile(config) {

  var data = readFile (config.input);
  processInputFile(config, data);
}

function exitFailure() {
  process.exit(1);
}

function exitSuccess() {
  process.exit(0);
}

function abort(message) {
  for (var i = 0, length = arguments.length; i < length; i++) {
    console.error(arguments[i]);
  }
  exitFailure();
}

function isOption(arg) {
  return (/^-/).test(arg);
}

function nextArg() {
  args.shift();
}

function ammendUMLBlocks(aUMLBlocks) {
    aUMLBlocks.forEach(function (block) {
        block.properties = options.properties;
        if (options.cardinalities) {
            block.parseCardinalities();
        }
    })
}

function processInputFile(config, data) {

  try {
      const inputpath =  path.dirname(fs.realpathSync(config.input));

      const blocks = preprocessor.parse(data);
      const defines = new Map();
      let processedData = "";
      let debugData = "";
      let lineNumber = 1;
      let processCode = true;
      let activeLevel = 0;
      let currentLevel = 0;

      for (let i = 0, length = blocks.length; i < length; i++) {

        let block  = blocks[i];

        //console.error(typeof block);

        if (typeof block === "string" && processCode) {

            defines.forEach(function(value, key){

                block = block.replace(new RegExp('(^|\\s)'+key+'(?=\\s)', 'g')," " + value);
            });
            processedData += block + "\n";
            debugData += lineNumber++ + ": " + block + "\n";
        }
        if (typeof block === "object") {
          if (block instanceof Define) {

            defines.set(block.getKey(),block.getValue());
          }
          if (block instanceof IfDef) {

             currentLevel++;
             if (processCode) {
               activeLevel++;
               processCode = block.isDef();
               if (!defines.has(block.getKey())) {
                 processCode = !processCode;
               }
             }
          }
          if (block instanceof Else) {
            if (currentLevel === activeLevel) {

                processCode = !processCode;
            }

          }
          if (block instanceof EndIf) {

            if (currentLevel === activeLevel) {
                processCode = true;
                activeLevel--;

            }
            currentLevel--;
          }
          if (block instanceof Include) {

              const newBlocks = preprocessor.parse(readFile(path.format({ dir: inputpath, base: block.getFile()})));


              blocks.splice(i,1,...newBlocks.slice(1,newBlocks.length-1)); // need to take our the begin/end umls.
              length = blocks.length;
              i--; //Because we want to process this block again, as we just replaced it. bit dirty, but now at least the array as a whole makes sense.
          }
        }
    }
    if (config.debug) {
        console.error(debugData);
    }
    var aUMLBlocks = parser.parse(processedData);
  } catch(e) {
    abort("Error parsing input file: ", config.input, e);
  }

  ammendUMLBlocks(aUMLBlocks);

    if (config.template) {
      fs.readFile("./" + config.template + ".hbs", {encoding: "UTF-8"}, function (err, data) {

          if (err === null) {

              //config.helpers = "./" + config.template;
              config.helpers = config.template;
              processTemplateFile(config, data, aUMLBlocks);
          } else {
              abort("Unable to find custom template file: " + config.template + ".hbs .");
          }
      });
  }
  else {
        fs.readFile(__dirname + "/templates/" + config.language + ".hbs", {encoding: "UTF-8"}, function (err, data) {
            if (err === null) {

                config.helpers = __dirname + "/templates/" + config.language;
                processTemplateFile(config, data, aUMLBlocks);
            } else {
                abort("Unable to read template file for " + config.language + ".");
            }
        });
    }
}


function processTemplateFile(config, templateData, dictionary) {

    if (fs.existsSync(config.helpers + ".js")) {


        //TODO: This mess is here because we want a template/js to be able to load
        // UML Model Class files, and the second is there to be able to load
        // a template/js from the command line.
        module.paths.push(__dirname + "\\src");
        module.paths.push("./");

        var helpers = require(config.helpers);
        for (var func in helpers) {
            hbs.registerHelper(func, helpers[func]);
        }
    }

    hbs.registerHelper('isType',function (type){

        const type2 = this.getReturnType();

        return type2 == type;

    });

    hbs.registerHelper('isAccessType',function (type){

        return this.getAccessType() == type;

    });

    hbs.registerHelper('cleanString',function (string){

        return  string?string.replace(/\s+/g," ").trim():null;
    });

    hbs.registerHelper('noQuotes',function (string){

        return string?string.replace(/"/g,"").trim():null;
    });

    hbs.registerHelper('escapeBraces',function (string){

        return string?string.replace(/[\[\]{}]/g,"\\$&").trim():null;
    });







    var template = hbs.compile(templateData);

  var output = "";

  dictionary.forEach(function (element) {
  //  element.getClasses().forEach(function (element) {
      //RS: Python is very peculiar about blank lines, and it does not like the second EOL that was added here.
      output += template(element) + os.EOL; // + os.EOL;
  //  })
  });

  if (config.output === null) {
    console.log(output);
  } else {
    fs.writeFile(config.output, output, function (err) {
      if (err !== null) {
        abort("Unable to write output file for " + config.output + ".");
      }
    })
  }

}

// Workaround for an apparent bug in Handlebars: functions are not called with the parent scope
// as context.
//
// Here the getFullName is found in the parent scope (Class), but it is called with the current
// scope (Field) as context:
//
// {{#each getFields}}
//   {{../getFullName}}
// {{/each}}
//
// The following helper works around it:
//
// {{#each getFields}}
//   {{#call ../this ../getFullName}}
// {{/each}}

hbs.registerHelper('call', function (context, member, options) {
   return member.call(context);
});

exports.convertFile = convertFile;
